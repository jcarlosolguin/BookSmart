/* eslint-disable
 func-names,
 max-lines,
 max-nested-callbacks,
 max-statements,
 no-undefined,
 prefer-arrow-callback
 */
/* global after, before, describe, it */

'use strict';

const Promise = require('bluebird'); // eslint-disable-line no-shadow
const _ = require('lodash');
const appModulePath = require('app-module-path');
const assert = require('assert');
const sinon = require('sinon');
const Utils = require('javascript-utils');

appModulePath.addPath('./');

const WebClient = require('lib/webClient');

describe('WebClient', function () {
    describe('WebClient::request', function () {
        const webClients = [new WebClient('https://domain.com'), new WebClient('https://domain.com/')];

        before(function () {
            // only doing this for webClients[0] because it modifies the request module itself,
            // which is shared by all instances of WebClient
            sinon.stub(webClients[0]._request, 'getAsync', Utils.webRequestUtils.returnRequestAsResponse);
        });

        after(function () {
            // only doing this for webClients[0] because it modifies the request module itself,
            // which is shared by all instances of WebClient
            webClients[0]._request.getAsync.restore();
        });

        it('should make GET requests to https://domain.com/path/to/resource (no options and path = "")', function () {
            return Promise.all(_.map(webClients,
                webClient => webClient.request('path/to/resource')
                    .then(verifyRequest)));

            function verifyRequest (request) {
                Utils.assertionUtils.assertPropertyIs(request, 'path', 'https://domain.com/path/to/resource');

                const options = _.get(request, 'options');
                assert(_.isEmpty(options));
            }
        });

        it('should make GET requests to https://domain.com/path/to/resource (options and path = "/")', function () {
            return Promise.all(_.map(webClients,
                webClient => webClient.request('/path/to/resource', { foo: 'bar' })
                    .then(verifyRequest)));

            function verifyRequest (request) {
                Utils.assertionUtils.assertPropertyIs(request, 'path', 'https://domain.com/path/to/resource');

                const options = _.get(request, 'options');
                assert.deepStrictEqual({ foo: 'bar' }, options);
            }
        });
    });

    describe('webClient::requestAsJson', function () {
        const webClient = new WebClient('https://domain.com');

        before(function () {
            const returnObject = { body: JSON.stringify({ foo: 'bar' }) };
            sinon.stub(webClient._request, 'getAsync', Utils.webRequestUtils.returnSomething(returnObject));
        });

        after(function () {
            webClient._request.getAsync.restore();
        });

        it('should return a full response with JSON body', function () {
            return webClient.requestAsJson('/path/to/resource')
                .then(verifyResponse);

            function verifyResponse (response) {
                assert.deepStrictEqual({ foo: 'bar' }, response.body);
            }
        });
    });

    describe('webClient::requestBody', function () {
        const webClient = new WebClient('https://domain.com');

        before(function () {
            const returnObject = { body: JSON.stringify({ foo: 'bar' }) };
            sinon.stub(webClient._request, 'getAsync', Utils.webRequestUtils.returnSomething(returnObject));
        });

        after(function () {
            webClient._request.getAsync.restore();
        });

        it('should return body response', function () {
            return webClient.requestBody('/path/to/resource')
                .then(verifyResponse);

            function verifyResponse (response) {
                assert.strictEqual(JSON.stringify({ foo: 'bar' }), response);
            }
        });
    });

    describe('webClient::requestBodyAsJson', function () {
        const webClient = new WebClient('https://domain.com');

        before(function () {
            const returnObject = { body: JSON.stringify({ foo: 'bar' }) };
            sinon.stub(webClient._request, 'getAsync', Utils.webRequestUtils.returnSomething(returnObject));
        });

        after(function () {
            webClient._request.getAsync.restore();
        });

        it('should a JSON body response', function () {
            return webClient.requestBodyAsJson('/path/to/resource')
                .then(verifyResponse);

            function verifyResponse (response) {
                assert.deepStrictEqual({ foo: 'bar' }, response);
            }
        });
    });
});
